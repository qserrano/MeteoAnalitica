import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Importa las funciones de tus m√≥dulos
from modules.monthly_comparison import show_monthly_comparison
from modules.historical_averages import show_historical_averages
from modules.extreme_analysis import show_extreme_analysis

# --- Configuraci√≥n b√°sica de la p√°gina ---
st.set_page_config(
    page_title="MeteoAnalitica",
    page_icon="‚òÄÔ∏è",
    layout="wide"
)

st.title("‚òÄÔ∏è MeteoAnalitica: An√°lisis de Datos Clim√°ticos")

# --- Carga de datos (Cacheado para eficiencia) ---
CSV_FILE = "data/datos_clima.csv"

@st.cache_data
def load_data(file_path):
    try:
        df = pd.read_csv(file_path, parse_dates=['DAY'], dayfirst=True, decimal=',')
        # Asegurarse de que Mes y A√±o est√°n disponibles si no los creas en el m√≥dulo
        df['Mes'] = df['DAY'].dt.month
        df['A√±o'] = df['DAY'].dt.year
        return df
    except FileNotFoundError:
        st.error(f"Error: El archivo {file_path} no se encontr√≥. Aseg√∫rate de que est√© en la carpeta 'data/'.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Error al cargar los datos: {e}. Revisa el formato de tu CSV y los nombres de las columnas.")
        st.info("Aseg√∫rate de que la columna de fecha se llama 'DAY' y que el formato sea compatible (DD/MM/AAAA si usas dayfirst=True).")
        return pd.DataFrame()

df = load_data(CSV_FILE)

if df.empty:
    st.warning("No se pudieron cargar los datos o el archivo est√° vac√≠o. Por favor, revisa el CSV.")
    st.stop() # Detiene la ejecuci√≥n si no hay datos

# --- Barra Lateral de Navegaci√≥n ---
st.sidebar.info("MeteoAnalitica: Tu herramienta para explorar el clima de La Pobla Tornesa.")
st.sidebar.markdown("---")

st.sidebar.title("Navegaci√≥n")
options = ["Dashboard del √öltimo Mes", "Comparaci√≥n Mensual Detallada", "Promedios Hist√≥ricos", "An√°lisis de Extremos Clim√°ticos"] # ¬°A√±ade la nueva opci√≥n!
choice = st.sidebar.radio("Ir a:", options)

# --- Contenido Principal Basado en la Selecci√≥n del Men√∫ ---

if choice == "Dashboard del √öltimo Mes":
    st.header("üìä Dashboard del √öltimo Mes")
    st.write("Aqu√≠ se muestran los an√°lisis clave del mes m√°s reciente disponible en tus datos.")

    if not df.empty:
        # Encuentra la fecha m√°s reciente
        latest_date = df['DAY'].max()
        # Filtra los datos del √∫ltimo mes
        df_latest_month = df[(df['DAY'].dt.month == latest_date.month) & (df['DAY'].dt.year == latest_date.year)].copy()

        if not df_latest_month.empty:
            st.write(f"Datos del mes de **{latest_date.strftime('%B de %Y')}**:") # Muestra el nombre del mes y a√±o
            # Ocultar columnas espec√≠ficas
            columns_to_hide = ['RECORD_NUMBER', 'Mes', 'A√±o']
            columns_to_show = [col for col in df_latest_month.columns if col not in columns_to_hide]
            df_display = df_latest_month[columns_to_show].copy()
            if 'DAY' in df_display.columns:
                df_display['DAY'] = df_display['DAY'].dt.strftime('%d/%m/%Y') # Formato DD/MM/AAAA
            st.dataframe(df_display, hide_index=True) # Muestra todas las filas del √∫ltimo mes sin las columnas ocultas y sin el √≠ndice

            # --- Ejemplo de visualizaci√≥n para el dashboard del √∫ltimo mes ---
            # Puedes personalizar esto con los gr√°ficos y m√©tricas que quieras
            st.subheader("Temperaturas Diarias del √öltimo Mes")
            
            # Aseg√∫rate de que 'Temperatura_Maxima' y 'Temperatura_Minima' (o similar) existen en tu CSV
            # Adapta estos nombres a tus columnas reales
            temperatura_cols = [col for col in ['TEMP_MAX', 'TEMP_MIN', 'TEMP_MEDIA'] if col in df_latest_month.columns]

            if temperatura_cols:
                fig, ax = plt.subplots(figsize=(12, 6))
                for col in temperatura_cols:
                    ax.plot(df_latest_month['DAY'].dt.day, df_latest_month[col], label=col.replace('_', ' '))
                
                ax.set_title(f'Temperaturas Diarias en {latest_date.strftime("%B de %Y")}')
                ax.set_xlabel('D√≠a del Mes')
                ax.set_ylabel('Temperatura (¬∞C)') # Ajusta la unidad seg√∫n tus datos
                ax.legend()
                ax.grid(True)
                st.pyplot(fig)
            else:
                st.warning("No se encontraron columnas de temperatura para mostrar en el dashboard.")

            st.subheader("Resumen Estad√≠stico del √öltimo Mes")
            st.write(df_latest_month.describe())

        else:
            st.warning("No se encontraron datos para el mes m√°s reciente.")
    
elif choice == "Comparaci√≥n Mensual Detallada":
    if not df.empty:
        # Llamada a la funci√≥n del m√≥dulo de comparaci√≥n mensual
        show_monthly_comparison(df.copy()) # Pasa una copia para evitar SettingWithCopyWarning
    else:
        st.error("No hay datos cargados para realizar la comparaci√≥n mensual.")

elif choice == "Promedios Hist√≥ricos":
    if not df.empty:
        # Llamada a la funci√≥n del m√≥dulo de promedios hist√≥ricos
        show_historical_averages(df.copy()) # Pasa una copia para evitar SettingWithCopyWarning
    else:
        st.error("No hay datos cargados para calcular promedios hist√≥ricos.")
    
elif choice == "An√°lisis de Extremos Clim√°ticos":
    if not df.empty:
        # Llamada a la funci√≥n del m√≥dulo de an√°lisis de extremos
        show_extreme_analysis(df.copy()) # Pasa una copia para evitar SettingWithCopyWarning
    else:
        st.error("No hay datos cargados para realizar el an√°lisis de extremos clim√°ticos.")
